-- 1

create table addresses
(
    id   int primary key auto_increment,
    name varchar(100) not null
);

create table categories
(
    id   int primary key auto_increment,
    name varchar(10) not null
);

create table clients
(
    id           int primary key auto_increment,
    full_name    varchar(50) not null,
    phone_number varchar(20) not null
);

create table drivers
(
    id         int primary key auto_increment,
    first_name varchar(30) not null,
    last_name  varchar(30) not null,
    age        int         not null,
    rating     float default 5.5
);

create table cars
(
    id          int primary key auto_increment,
    make        varchar(20) not null,
    model       varchar(20),
    year        int         not null default 0,
    mileage     int                  default 0,
    `condition` char(1)     not null,
    category_id int         not null,
    constraint fk_cars_categories
        foreign key (category_id)
            references categories (id)
);

create table courses
(
    id              int primary key auto_increment,
    from_address_id int      not null,
    constraint fk_courses_addresses
        foreign key (from_address_id)
            references addresses (id),
    start           datetime not null,
    bill            decimal(10, 2) default 10,
    car_id          int      not null,
    constraint fk_courses_cars
        foreign key (car_id)
            references cars (id),
    client_id       int      not null,
    constraint fk_courses_clients
        foreign key (client_id)
            references clients (id)
);

create table cars_drivers
(
    car_id    int not null,
    constraint fk_cars_drivers_cars
        foreign key (car_id)
            references cars (id),
    driver_id int not null,
    constraint cars_drivers_drivers
        foreign key (driver_id)
            references drivers (id),
    primary key (car_id, driver_id)
);

-- 2

insert into clients(full_name, phone_number)
select concat(d.first_name, ' ', d.last_name),
       concat('(088) 9999', d.id * 2)
from drivers as d
where d.id >= 10
  and d.id <= 20;

-- 3

update cars as c
set `condition` = 'C'
where c.mileage >= 800000
    and c.mileage is null
   or c.year <= 2010
    and c.make != 'Mercedes-Benz';

-- 4

delete c
from clients as c
         left join courses c2 on c.id = c2.client_id
where c2.id is null
  and character_length(c.full_name) > 3;

-- 5

select c.make, c.model, c.`condition`
from cars as c
order by c.id;

-- 6

select d.first_name, d.last_name, c.make, c.model, c.mileage
from drivers as d
         join cars_drivers cd on d.id = cd.driver_id
         join cars c on c.id = cd.car_id
where c.mileage is not null
order by c.mileage desc, d.first_name;


-- 7

select c.id                                 as car_id,
       c.make,
       c.mileage,
       count(c2.car_id)                     as count_of_courses,
       cast(avg(c2.bill) as decimal(10, 2)) as avg_bill
from cars as c
         left join courses c2 on c.id = c2.car_id
group by c.id
having count_of_courses != 2
order by count_of_courses desc, c.id;

-- 8

select c.full_name, count(c2.car_id) as count_of_cars, sum(c2.bill) as total_sum
from clients as c
         join courses c2 on c.id = c2.client_id
group by c.full_name
having full_name LIKE '_a%'
   and count_of_cars > 1
order by c.full_name;

-- 9

select a.name,
       if(hour(c.start) between 6 and 20, 'Day', 'Night') as day_time,
       c.bill,
       c2.full_name,
       c3.make,
       c3.model,
       c4.name                                            as category_name
from addresses as a
         join courses c on a.id = c.from_address_id
         join clients c2 on c2.id = c.client_id
         join cars c3 on c3.id = c.car_id
         join categories c4 on c4.id = c3.category_id
order by c.id;

-- 10

delimiter $$
create function udf_courses_by_client(phone_num VARCHAR(20))
    returns INT
    deterministic
begin
    return (select count(c2.client_id) as count
            from clients as c
                     left join courses c2 on c.id = c2.client_id
            where c.phone_number = phone_num);
end $$
delimiter ;

SELECT udf_courses_by_client('(803) 6386812') as `count`;

-- 11

DELIMITER $$
create procedure `udp_courses_by_address`(address_name varchar(100))
begin
    select a.name,
           c2.full_name          as full_names,
           (case
                when c.bill <= 20 then 'Low'
                when c.bill <= 30 then 'Medium'
                else 'High' end) as level_of_bill,
           c3.make,
           c3.`condition`,
           c4.name               as cat_name
    from addresses as a
             join courses c on a.id = c.from_address_id
             join clients c2 on c2.id = c.client_id
             join cars c3 on c3.id = c.car_id
             join categories c4 on c4.id = c3.category_id
    where a.name = address_name
    order by c3.make, c2.full_name;
end $$
delimiter ;

CALL udp_courses_by_address('700 Monterey Avenue');
CALL udp_courses_by_address('66 Thompson Drive');


